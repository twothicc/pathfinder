{"version":3,"sources":["pathfinding/Node.js","pathfinding/Grid.js","reportWebVitals.js","index.js"],"names":["Node","props","useState","path","pathstate","setPathstate","side","handlePathDrag","event","preventDefault","ismousedown","clickstate","setAndUpdatePathstate","parseInt","handleSpecialNode","setSpecialNode","id","target","attributes","value","handlePathClick","state","updateGrid","useEffect","style","height","width","backgroundColor","outline","onMouseEnter","onClick","Grid","grid","setGrid","setSide","formside","setFormside","setClickstate","setMousedown","startcoord","setStartcoord","endcoord","setEndcoord","isstartset","setStartset","isendset","setEndset","gridorigin","setGridorigin","gridhistory","setGridhistory","gridfinal","setGridfinal","stepperstage","setStepperstage","error","setError","error_msg","setError_msg","length","temp","i","row","j","push","console","log","window","addEventListener","exitfound","handleSwitchNode","currentTarget","highlight_exit_path","arr","node","changeNodeState","xycoord","mini","column","findpath","curr","pathhistory","paths","closed_options","edits_made","new_curr","setTimeout","newhistory","history","nodetype","action","result","node_id","node_state","mod","handleStepperChange","undefined","taken","display","flexDirection","alignItems","position","marginTop","textAlign","color","zIndex","justifyContent","marginBottom","TextField","type","label","onChange","Button","variant","disabled","marginInline","findxindex","findyindex","start","end","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","map","box","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58853d2f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Node(props) {\n    const [pathstate, setPathstate] = useState(props.path)\n    const side = props.side;\n    \n    useEffect(() => {\n        setPathstate(props.path);\n    }, [props.path])\n\n    //handleSpecialNode has to be implemented in both drag and click\n    function handlePathDrag(event) {\n        //console.log(event.target.attributes.path.value);\n        event.preventDefault();\n        if (props.ismousedown) {\n            if (props.clickstate === '0' || props.clickstate === '3') {\n                setAndUpdatePathstate(parseInt(props.clickstate));\n                props.handleSpecialNode(parseInt(props.clickstate), 'close');\n                props.setSpecialNode(parseInt(props.clickstate), props.id);\n            } else {\n                if (event.target.attributes.path.value === '0' || event.target.attributes.path.value === '3') {\n                    props.handleSpecialNode(parseInt(event.target.attributes.path.value), 'open')\n                    props.setSpecialNode(parseInt(event.target.attributes.path.value), null);\n                    setAndUpdatePathstate(parseInt(props.clickstate));\n                    \n                } else {\n                    setAndUpdatePathstate(parseInt(props.clickstate));\n                }\n            }\n        } else {}\n    }\n\n    function handlePathClick(event) {\n        event.preventDefault();\n        if (props.clickstate === '0' || props.clickstate === '3') {\n            setAndUpdatePathstate(parseInt(props.clickstate));\n            props.handleSpecialNode(parseInt(props.clickstate), 'close');\n            props.setSpecialNode(parseInt(props.clickstate), props.id);\n        } else {\n            if (event.target.attributes.path.value === '0' || event.target.attributes.path.value === '3') {\n                props.handleSpecialNode(parseInt(event.target.attributes.path.value), 'open')\n                props.setSpecialNode(parseInt(event.target.attributes.path.value), null);\n                setAndUpdatePathstate(parseInt(props.clickstate));\n            } else {\n                setAndUpdatePathstate(parseInt(props.clickstate));\n            }\n        }\n\n    }\n\n    function setAndUpdatePathstate(state) {\n        setPathstate(state);\n        props.updateGrid(props.id, state);\n    }\n\n    //console.log('clickstate is now ' + props.clickstate)\n    switch (pathstate) {\n        case 0:\n            return (\n                <div\n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'DarkGreen', outline: `${side / 10}px solid white`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        case 1:\n            return (\n                <div \n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'AliceBlue', outline: `${side / 10}px solid white`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        case 2:\n            return (\n                <div \n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'black', outline: `${side / 10}px solid white`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        case 3:\n            return (\n                <div \n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'DarkRed', outline: `${side / 10}px solid white`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        case 4:\n            return (\n                <div\n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'deepskyblue', outline: `${side / 10}px solid aliceblue`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        case 5:\n            return (\n                <div\n                    id = {props.id}\n                    path = {pathstate}\n                    style = {{height: `${side}px`, width: `${side}px`, backgroundColor: 'greenyellow', outline: `${side / 10}px solid white`}}\n                    onMouseEnter = {handlePathDrag}\n                    onClick = {handlePathClick}\n                />\n            )\n        default:\n            break;\n    }\n    \n}\n\nexport default Node","import { Button, TextField } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport Node from './Node';\nimport Slider from '@material-ui/core/Slider';\n\nfunction Grid(props) {\n    const [grid, setGrid] = useState([]);\n    const [side, setSide] = useState(24);\n    const [formside, setFormside] = useState(24);\n    const [clickstate, setClickstate] = useState(1);\n    const [ismousedown, setMousedown] = useState(false);\n    const [startcoord, setStartcoord] = useState(null);\n    const [endcoord, setEndcoord] = useState(null);\n    const [isstartset, setStartset] = useState(false);\n    const [isendset, setEndset] = useState(false);\n\n    const [gridorigin, setGridorigin] = useState([]);\n    const [gridhistory, setGridhistory] = useState([]);\n    const [gridfinal, setGridfinal] = useState([]);\n    const [stepperstage, setStepperstage] = useState(0);\n\n    const [error, setError] = useState(false);\n    const [error_msg, setError_msg] = useState('');\n\n    //NOTE: when taking from grid, do in the form of [y coord][x coord]\n    //when adding any history or any other features, add in the form of [x coord][y coord]\n    useEffect(() => {\n        if (grid.length === 0) {\n            var temp = [];\n\n            for (let i = 0; i < side; i = i + 1) {\n                var row = [];\n                for (let j = 0; j < side; j = j + 1) {\n                    row.push([i * side + j, 2]);\n                }\n                temp.push(row);\n            }\n            \n            setGrid(temp);\n            console.log('resetGrid')\n        }      \n        console.log('gridfinal is ' + gridfinal);\n        window.addEventListener('mousedown', event => setMousedown(true));\n        window.addEventListener('mouseup', event => setMousedown(false));\n\n        \n    }, [gridfinal, grid, side, clickstate]);\n\n    var exitfound = false;\n\n    function handleSwitchNode(event) {\n        setClickstate(event.currentTarget.id);\n    }\n\n    function highlight_exit_path(arr) {\n        var temp = grid;\n        for (let node of arr) {\n            temp[node[1]][node[0]][1] = 5\n        }\n        setGrid(temp);\n    }\n\n    function handlePathFind() {\n        function findxindex(id) {\n            return id % side;\n        }\n\n        function findyindex(id) {\n            return (id - id % side) / side;\n        }\n\n        const start = [findxindex(startcoord), findyindex(startcoord)];\n        const end = [findxindex(endcoord), findyindex(endcoord)];\n        if (isstartset && isendset) {\n            var temp = [];\n\n            for (let i = 0; i < side; i = i + 1) {\n                for (let j = 0; j < side; j = j + 1) {\n                    if (grid[i][j][1] === 1) {\n                        temp.push([j, i]);\n                    }\n                }\n            }\n            \n            setGridorigin(temp);\n            \n            findpath(start, end, []);\n\n            \n        } else {\n            setError_msg('start or end has not been set');\n            setError(true);\n            setTimeout(() => {\n                setError(false);\n            }, 500);\n        }\n    }\n\n    function changeNodeState(xycoord) {\n        var temp = [];\n        for (let row of grid) {\n            let mini = [];\n            for (let column of row) {\n                mini.push(column);\n            }\n            temp.push(mini);\n        }\n        temp[xycoord[1]][xycoord[0]][1] = 4;\n        console.log('changed node to 4 at ' + xycoord);\n        setGrid(temp);\n    }\n\n    function findpath(curr, target, pathhistory) {\n        //console.log(curr + ' and ' + target)\n        if (!exitfound) {\n            //up down left right\n            const paths = [curr[1] - 1, curr[1] + 1, curr[0] - 1, curr[0] + 1];\n            var closed_options = 0;\n            var edits_made = [];\n            //check if paths can be taken\n            for (let i = 0; i < paths.length; i = i + 1) {\n                paths[i] = [paths[i] >= 0, paths[i]];\n            }\n            \n            //first two are edits made to the y coord, so just add on the x coord\n            for (let i = 0; i < 2; i = i + 1) {\n                if (paths[i][0]) {\n                    if (curr[0] === target[0] && paths[i][1] === target[1]) {\n                        console.log('exit found at ' + [curr[0], paths[i][1]]);\n                        console.log('path taken to exit is ' + pathhistory);\n                        exitfound = true;\n                        highlight_exit_path(pathhistory);\n                        setGridfinal(pathhistory);\n                        setStepperstage(gridhistory.length);\n                    } else {\n                        if (grid[paths[i][1]][curr[0]][1] === 1) {\n                            let new_curr = [curr[0], paths[i][1]];\n                            \n                            setTimeout(() => {\n                                changeNodeState(new_curr);\n                                edits_made.push(new_curr);\n                                let newhistory = [];\n                                for (let i of pathhistory) {\n                                    newhistory.push(i);\n                                }\n                                newhistory.push(new_curr);\n                                findpath(new_curr, target, newhistory);\n                            }, 50);\n                            \n                        } else {\n                            closed_options += 1;\n                        }\n                    }\n                } else {\n                    closed_options += 1;\n                }\n            }\n            //last two are edits made to x coord, so just add on the y coord\n            for (let i = 2; i < 4; i = i + 1) {\n                if (paths[i][0]) {\n                    if (paths[i][1] === target[0] && curr[1] === target[1]) {\n                        console.log('exit found at ' + [paths[i][1], curr[1]]);\n                        console.log('path taken to exit is ' + pathhistory);\n                        exitfound = true;\n                        highlight_exit_path(pathhistory);\n                        setGridfinal(pathhistory);\n                        setStepperstage(gridhistory.length);\n                    } else {\n                        if (grid[curr[1]][paths[i][1]][1] === 1) {\n                            let new_curr = [paths[i][1], curr[1]];\n                            \n                            \n                            setTimeout(() => {\n                                changeNodeState(new_curr);\n                                edits_made.push(new_curr);\n                                let newhistory = [];\n                                for (let i of pathhistory) {\n                                    newhistory.push(i);\n                                }\n                                newhistory.push(new_curr);\n                                findpath(new_curr, target, newhistory);\n                            }, 50);\n                        } else {\n                            closed_options += 1;\n                        }\n                    }\n                } else {\n                    closed_options += 1;\n                }\n            }\n\n            if (closed_options === 4) {\n                console.log('path ended at ' + curr);\n            }\n\n            var history = gridhistory;\n            history.push(edits_made);\n            setGridhistory(history);\n        } else {\n            console.log('exit already found');\n        }\n    }\n\n\n\n    //actions are 'close' or 'open'\n    //close indicates to prevent more start/end nodes from being added\n    //open indicates to allow start/end node to be added\n    //nodetype indicates the type of node the actions above are done to\n    function handleSpecialNode(nodetype, action) {\n        if (action === 'close') {\n            if (nodetype === 0) {\n                setStartset(true);\n                setClickstate(1);\n            } else {\n                setEndset(true);\n                setClickstate(1);\n            }\n        } else {\n            if (nodetype === 0) {\n                setStartset(false);\n            } else {\n                setEndset(false);\n            }\n        }\n    }\n\n    function handleResetGrid() {\n        var temp = [];\n\n        for (let i = 0; i < side; i = i + 1) {\n            var row = [];\n            for (let j = 0; j < side; j = j + 1) {\n                row.push([i * side + j, 2]);\n            }\n            temp.push(row);\n        }\n        \n        setGrid(temp);\n        console.log('resetGrid');\n\n        setStartcoord(null);\n        setEndcoord(null);\n        setStartset(false);\n        setEndset(false);\n\n        console.log('resetStartEndNodes');\n\n        setGridorigin([]);\n        setGridhistory([]);\n        setGridfinal([]);\n        \n        console.log('cleared pathfinding history');\n    }\n\n    //Sets the start and end node coordinates for pathfind\n    function setSpecialNode(nodetype, result) {\n        if (nodetype === 0) {\n            setStartcoord(result);\n        } else {\n            setEndcoord(result);\n        }\n    }\n\n    function updateGrid(node_id, node_state) {\n        var temp = grid;\n        var mod = node_id % side;\n        temp[(node_id - mod) / side][mod][1] = node_state\n        //console.log('node at ' + node_id + 'has been set to ' + node_state);\n        setGrid(temp);\n    }\n\n    function handleFormsideChange(event) {\n        setFormside(event.target.value);\n    }\n\n    function handleSideChange(event) {\n        \n        var temp = [];\n        for (let i = 0; i < formside; i = i + 1) {\n            var row = [];\n            for (let j = 0; j < formside; j = j + 1) {\n                row.push([i * formside + j, 2]);\n            }\n            temp.push(row);\n        }\n        setGrid(temp);\n        \n        setSide(formside);\n\n        setStartcoord(null);\n        setEndcoord(null);\n        setStartset(false);\n        setEndset(false);\n\n        console.log('resetStartEndNodes');\n\n        setGridorigin([]);\n        setGridhistory([]);\n        setGridfinal([]);\n        \n        console.log('cleared pathfinding history');\n        \n    }\n\n    function handleStepperChange(event, value) {\n        console.log(gridhistory.length)\n        console.log(value)\n        if (value !== undefined) {\n            setStepperstage(value);\n\n            if (value === gridhistory.length) {\n                var temp = grid;\n                for (let path of gridorigin) {\n                    temp[path[1]][path[0]][1] = 1;\n                }\n\n                for (let taken of gridfinal) {\n                    temp[taken[1]][taken[0]][1] = 5;\n                }\n\n                setGrid(temp);\n            } else {\n                var temp = grid;\n\n                for (let path of gridorigin) {\n                    temp[path[1]][path[0]][1] = 1;\n                }\n\n                for (let i = 0; i < value; i = i + 1) {\n                    for (let taken of gridhistory[i]) {\n                        temp[taken[1]][taken[0]][1] = 4;\n                    }\n                }\n                // for (let taken of gridhistory[value]) {\n                //     temp[taken[1]][taken[0]][1] = 4;\n                // }\n\n                setGrid(temp);\n            }\n            \n        } else {}\n    }\n\n    //0 for start, 1 for path, 2 for wall, 3 for end\n    // console.log(grid);\n    //console.log(clickstate);\n    //console.log('mousedown is ' + ismousedown)\n    // console.log('origin is ' + gridorigin);\n    // console.log('history is ' + gridhistory);\n\n    return (\n        \n        <div style = {{display: 'flex', flexDirection: 'column', alignItems: 'center', width: '100%', height: 'auto'}}>\n            {error ? <h3 style = {{position: 'fixed', marginTop: '15%', textAlign: 'center', color: 'red', zIndex: '1'}}>{error_msg}</h3> : <div/>}\n            <h1 style = {{textAlign: 'center'}}>Pathfinder</h1>\n            <div style = {{display: 'flex', flexDirection: 'row', alignItems: 'center', width: '100%', height: 'auto', justifyContent: 'center', marginBottom: '1%'}}>\n                <TextField type = 'number' label = 'adjust sides' value = {formside} onChange = {handleFormsideChange}/>\n                <Button variant = 'outlined' style = {{backgroundColor: 'aliceblue'}} onClick = {handleSideChange}>Change Side</Button>\n            </div>\n            <div style = {{display: 'flex', flexDirection: 'row', justifyContent: 'center', width: '100%', height: 'auto', marginTop: '2%', marginBottom: '2%'}}>\n                {!isstartset\n                    ? <Button id = {0} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>Start Node</Button>\n                    : <Button disabled id = {0} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>Start Node</Button>\n                }\n                \n                <Button id = {1} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>Path Node</Button>\n                <Button id = {2} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>Block Node</Button>\n\n                {!isendset\n                    ? <Button id = {3} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>End Node</Button>\n                    : <Button disabled id = {3} onClick = {handleSwitchNode} variant = 'outlined' style = {{marginInline: '1%', backgroundColor: 'aliceblue'}}>End Node</Button>\n                }\n                \n            </div>\n            \n            <div style = {{display: 'flex', flexDirection: 'row', alignItems: 'center', width: '100%', height: 'auto', justifyContent: 'center', marginBottom: '1%'}}>\n                <Button variant = 'outlined' onClick = {handlePathFind} style = {{backgroundColor: 'aliceblue', marginInline: '1%'}}>Find Path</Button>\n                <Button variant = 'outlined' onClick = {handleResetGrid} style = {{backgroundColor: 'aliceblue', marginInline: '1%'}}>Reset Grid</Button>\n            </div>\n            \n            {gridhistory.length === 0 \n                ?\n                    <Slider\n                        disabled={true}\n                        defaultValue={0}\n                        style = {{width: '40%', marginBottom: '1%'}}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        value={stepperstage}\n                        onChange={handleStepperChange}\n                        min={0}\n                        max={gridhistory.length}\n                    />\n                :\n                    <Slider\n                        defaultValue={gridhistory.length}\n                        style = {{width: '40%', marginBottom: '1%'}}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        value={stepperstage}\n                        onChange={handleStepperChange}\n                        min={0}\n                        max={gridhistory.length}\n                    />\n\n            }\n\n\n            <div style = {{display: 'flex', flexDirection: 'column', alignItems: 'center', width: '600px', height: '600px', marginBottom: '5%'}}>\n                \n                    {grid.map(row => \n                        <div key = {row[0][0]} style={{width: '100%', height: 'auto', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\n                            {row.map(box => \n                                <Node \n                                    key = {box[0]} \n                                    id = {box[0]} \n                                    side = {600 / side} \n                                    path = {box[1]} \n                                    clickstate = {clickstate} \n                                    ismousedown = {ismousedown} \n                                    handleSpecialNode = {handleSpecialNode}\n                                    setSpecialNode = {setSpecialNode}\n                                    updateGrid = {updateGrid}\n                                />\n                            )}\n                        </div>\n                        )}\n                \n            </div>\n            \n            \n\n\n        </div>\n    )\n}\n\nexport default Grid","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Grid from './pathfinding/Grid'\nimport {BrowserRouter, Switch} from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n    </Switch>\n    <React.StrictMode>\n      <Grid />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}